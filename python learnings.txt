Python is a popular programming language.
Python can be used on a server to create web applications.
It was created by Guido van Rossum, and released in 1991.
 
Variables/identifiers:
========================
While declaring the variables we should follow the bellow conditions:
 
Variables is nothing but containers and it is used to identify purpose which, can be used to store the values.
Variable names allways starts with letters(A-Z/a-z) or underscore symbol(_). and variables names should'nt start with numeric value.
 
Examples:
a=10
b="Cognine"
_ram=23.45
_123abc=4567
 
Note: In letters Uppercase(A-Z) and Lowercase(a-z) are diffrent
 
Data Types:
=============
 
Each variable has a data types. The type of the data that a variable may hold in it.
data types allways tell the which type of value we store in that particular variables.
 
Types of data types:-
===================
1) Numeric
a. Integer ====>0,1,2,3,4,,,,,,,,,,,,,,,,,-1,-2,-3
b. Float   ====>1.23,3.899,,,,,,,,,,
c. Complex ====> 3+4j (Real part) and (Imaginary)
2) Boolean
  * True/false
3) Sequence
a. Strings
b. List
c. Tuple
4) Dictionary
5) Set
 
 
Implicit Type Casting:
Implicit conversion also called as Automatic type conversion.
Type casting is nothing but type conversion and These type conversion is performed by the inter with out the intervertion of the programmer.
Ex: a=3,b=34.5
 
Explicit Type Casting:
If we wantedly change the data type for particular variable That is called Explicit type casting.
These type conversion is performed by only the programmer.
EX:
c=b
print(type(c))
 
c=int(b)
print(type(c))
 
Comments:
Interpreter ignore the these comments.
These Comment lines are not executed.
Single line comments;
#-------------------------------
Multi line comment:
"""------------------
---------------------
---------------------
"""
 
3)Sequence:
===========
a.Strings:- Strings is nothing but collection of characters[Letters,numbers,special characters]
   =======
Declation of strings:
Syntax: variable name = 'string value'
======
Ex:
a='Cognine Technologies'
b="Cognine"
c='''india'''
d="""python"""
 
Note:Here string(d) format look like multiline commenting format.
but,major diff is multi line commenting purpose we don't assign to the particular variable.
In strings we assign to on evariable so, it's consider as string.
 
Ex:
a='Cognine          |
technologies'       |Showing Error
 
Multiline strings:
a="""Cognnine
technologies"""
 
==> once declare the string we can'nt modify that string.
==> Strings we access the indiviusally also by using the index
==> Index allways starts with 0 and positive(+)/negative(-) index possible in python.
==> Using the len() function we find the length of any string
==> To check if a certain phrase or character is present in a string, we can use the keyword in.
==> To check if a certain character is NOT present in a string, we can use the keyword not in.
==> Upper() function to use convert the lower case string to Upper case string.
==> lower() function to use convert the upper case string to lower case string.
EX: a="Python"
    print(a.upper())
    print(a.lower())
==> Using split() function split the string
EX: a="P-y-t-h-o-n"
    a.split('-')
    print(a)
 
b.List: it is a collection based data type and 
Lists are used to store multiple items in a single variable.
using [] symbol while declaring the list.
EX:
   L=[1,46,78,'cognine']
 
==> List is ordered
==> and it's follows index
==> In list mutable possible[changes possible]
==> List allows duplicates
 
Nested list:
============
With in the list create another list is called "Nested list"
 
EX:
   numbers=[1,34,67,89,[90,33.4,44,"ram"],17,0]
 
==> Here we have inner list and outer list is there
==> list follows the index and list contains mixed data types
 
Accessing the List values:
==========================
EX:
   print(numbers[0])  o/p = 1
   print(numbers[3])  o/p = 89
   print(numbers[4])  o/p = [90,33.4,44,"ram"]
   print(numbers[3][1]  o/p = 33.4
   print(numbers[-2]   o/p = 17
   print(numbers[4][:])  o/p = [90,33.4,44,"ram"]

 
Nested dictinories:
===================
declare the dictinory with in the another dictionary is called Nested dictinories.
EX:
   student_data={
    "ram":{"roll_num":10,"age":20,"course":"phy"},
    "laxman":{"roll_num":12,"age":22,"course":"java","phone":9498}
}
 
accessing the dict:
==================
print(student_data)
print(student_data["ram"])
print(student_data["laxman"])
//Adding one more  key pair value in duct
student_data["ram"]["phone"]=3456
print(student_data)
 
 
c.tuple: It is a collection based data type and 
Lists are used to store multiple items in a single variable.
using () symbol while declaring the list.
EX:
   T1=(34,56,'ram','kumar',789)
 
==> Tuple is orderd
==> and It's follows the index
==> Tuple is not mutable/immutable (We can't change)
==> And tuples allows the duplicates
 
4) Dictionary:
==============
It is a collection based data type and Dictionaries are used to store data values in key:value pairs.
using {} symbol while declaring the list.
EX:
   k={'name':'naga','age':22,'add':'khammam'}
 
==> dictionaries are ordered
==> And it's follows the index
==> Dictionaries mutable
==> Here duplicates are not allowed
 
5) Set: It is a collection based data type and sets are used to store multiple items in a single variable.
=======
EX:
   s1={234,555,599}
 
==> Sets are unordered (order will be changing)
==> and sets are not follow the index
==> not mutable
==> Sets are not allowing the duplicates.
 
 
Operators:
=============
An operator is a symbol and which tells the compiler to perform certain mathmatical or logical operation on operands.
 
We have 3 types of operators are there based upon the operands
there are:-
1.Unary operator:
It's require only one operand to perform operation.
Ex:
   Incremet operator (++)
   Decrement operator (--)
2.Binary operator:
It requires minimum 2 operands.
EX:
   Arithmatic operators (+,-,*,/)
   Relational operatore (<,>,<=,>=,==,!=)
3.Ternary operator:
It require 3 operands.
Ex:
   Conditional operators (?,:)
 
Types of operators:
 
1)Arithmatic operators:
======================
This operator comes under the binary operator.
These operator using on int and float numeric value.
 
Operator                                                  Example
   +                     Addition                          a+b
   -                     Subtraction                       a-b
   *                     Multiplication                    a*b
   /                     Division                          a/b
   %                     Modular division                  a%b
 
 
2)Relational operator/Comaparision:
====================================
This is comes under binary operator
These relational operators mainly used to test condition.
 
Operator                                                  Example
<                     Less than                          a<b
>                     Greater than                       a>b
<=                    Less than equal to                 a<=b
>=                    greater than equal to              a>=b
   ==                     Equal to                          a==b
   !=                     Not equal to                      a!=b
 
3)Assignment operators:
========================
Assignment operators are used to assign values to variables.
 
Operator    Example       Same as
=	     x = 5	   x = 5	
+=	     x += 3	   x = x + 3	
-=	     x -= 3	   x = x - 3	
*=	     x *= 3	   x = x * 3	
/=	     x /= 3	   x = x / 3
 
4)Logical operators:
====================
This also comes under binary operator
 
Operator	Description	                                                         Example
and 	        Returns True if both statements are true	                       x < 5 and  x < 10	
or	        Returns True if one of the statements is true	                       x < 5 or x < 4	
not	        Reverse the result, returns False if the result is true	               not(x < 5 and x < 10)
 
 
Conditional statements/Dession making statements:-
==================================================
When a group of statements are specified in a block based on the given condition they are going to be executed.
In this conditional statements mainly using relational operators
There are conditional statements:
1) if statement
2) if-else statement
3) elif statements
 
 
1) If statement:
=================
When ever we check only one condition in that case we use this if statement.
Here only true block statement is present.
Ex:-
a=10
if a>5:
    print("cognine")
 
 
a) Nested if statement:-
==========================
With in the if statement use another if condition is called "Nested if"
 
Ex:-
a=input("Enter the a value= ")
a=int(a)
if a>4:
    if a<10:
        print("a is greater than 4 &less than 10")
 
 
2) if-else statement:
======================
if-else statement condition have both(true and flase block statement)
Here given condition true then if block will be executed or condition is false then else block will be executed.
Ex:-
a=25
if a<20:
    print("cognine")
else:
    print("Error")
 
 
3) elif statement:
===================
It is used to check multiple conditions then take dession.
Once if statement satisfied then elif & else part not check.
if statement not satisfied then enter elif part. And elif also not satisfied then only enter into else part.  
 
Ex:-
marks=input("Enter the student marks = ")
marks=int(marks)
if marks >= 90:
    print("First class")
elif marks>=80:
    print("Second class")
elif marks>=75:
    print("Distinction")
elif marks>=35:
    print("pass")
else:
    print("Fail")
 
 
Loops:
=======
Actually in not only python any programming language we execute the group of statements and block of code again & again 
or iteratively in this case loop's are helpfull.
1) While loop
2) For loop
 
1) While loop:
==============
Using while loop execute the block of code iteratively based up on given condition.
In this loop While is keyword
 
EX:
  i=5
while(i>0):
    print(i,end="")
    i=i-1
 
2) For loop:
=============
Here for is key word.
 
EX:
   L1=[1,3,5,8,4.78,'cognine']
   for i in L1:
       print(i)
 